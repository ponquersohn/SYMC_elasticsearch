
input {
    file { 
        path => "/root/azoty/unpack/smg.log-*"
        #path => "/var/log/smg-test.log"
        start_position => "beginning"
        discover_interval => "1"
        sincedb_path => "/var/log/logstash/sincedb-smg"
    }
}

filter {
    
    grok { 
        break_on_match => "true"
        patterns_dir => ["/etc/logstash/conf.d/smg/smg_patterns"]
        # single lines
        match => { "message" => "%{SMG_ACCEPT_PTRN}"}
        match => { "message" => "%{SMG_TLS_RECEIVED_PTRN}"}
        match => { "message" => "%{SMG_SUBJECT_PTRN}"}
        match => { "message" => "%{SMG_SOURCE_PTRN}"}
        match => { "message" => "%{SMG_SENDER_PTRN}"}
        match => { "message" => "%{SMG_MSGID_PTRN}"}
        match => { "message" => "%{SMG_MSG_SIZE_PTRN}"}
        match => { "message" => "%{SMG_EHLO_PTRN}"}
        match => { "message" => "%{SMG_LOGICAL_IP_PTRN}"}
        match => { "message" => "%{SMG_TD_RESULT_PTRN}"} 

        match => { "message" => "%{SMG_RECEIVED_PTRN}"}
        match => { "message" => "%{SMG_RESUBMIT_PTRN}"}
        match => { "message" => "%{SMG_UNSCANNABLE_PTRN}"}
        match => { "message" => "%{SMG_VIRUS_PTRN}"}

        # single to split
  
        match => { "message" => "%{SMG_ATTACH_PTRN}"}
        match => { "message" => "%{SMG_ORCPTS_PTRN}"}
        
        # multiple events per email
        match => { "message" => "%{SMG_UNTESTED_PTRN}"}   
        match => { "message" => "%{SMG_VERDICT_PTRN}"}
        match => { "message" => "%{SMG_IRCPTACTION_PTRN}"}
        match => { "message" => "%{SMG_TRACKERID_PTRN}"}
        match => { "message" => "%{SMG_FIRED_PTRN}"}
        match => { "message" => "%{SMG_DELIVER_PTRN}"}
        
        # need to check!!!!
        match => { "message" => "%{SMG_DELIVERY_FAILURE_PTRN}"}
        match => { "message" => "%{SMG_TRANS_FAILURE_PTRN}"}

        #everything else to bin

        match => { "message" => "%{SMG_ELSE}"}


        #add_field => [ "received_at", "%{@timestamp}" ]
        #add_field => [ "received_from", "%{host}" ]
          
    }
    
    date {
        match => [ "smgdate", "UNIX" ]
        target => [ "smgdate_formatted" ] 
    }
   
	mutate { 
		split => ["[attachments]","|"]
		split => ["[untested]","|"]      
		split => ["[recipients]", "|"]    
		split => ["[ircptaction]", "|"]
		split => ["[fired]", "|"]
	}   #
    
    if [action] == "ATTACHMENTS" {
        split {
            field => "attachments"
            }
    }
    
    if [action] == "UNTESTED" {
        split {
            field => "untested"
            }
    }
    
    if [action] == "RECIPIENTS" {
        split {
            field => "recipients"
            }
    }    
    
        if [action] == "IRCPTACTION" {
        split {
            field => "ircptaction" 
            }
    }    
    
    if [action] == "FIRED" {
        split {
            field => "fired"
            }
    }
    
    
    
    
#    if [action]=="LOGICAL_IP1"  {
#        geoip {
#            source=> "logical_ip"
#            target=> "logical_ip_geoip"
#        } 
#       	if [logical_ip] =~ /^10\./ {
#            mutate { replace      => { "[logical_ip_geoip][timezone]"      => "Europe/Poland" } }
#            mutate { replace      => { "[logical_ip_geoip][country_name]"  => "Internal Addresses" } }
#            mutate { replace      => { "[logical_ip_geoip][country_code2]" => "WPL" } }
#            mutate { replace      => { "[logical_ip_geoip][country_code3]" => "WPL" } }
#            mutate { remove_field => [ "[logical_ip_geoip][location]" ] }
#            mutate { add_field    => { "[logical_ip_geoip][location]"      => "170.525" } }
#            mutate { add_field    => { "[logical_ip_geoip][location]"      => "-45.865" } }
#            mutate { convert      => [ "[logical_ip_geoip][location]",        "float" ] }
#            mutate { replace      => [ "[logical_ip_geoip][latitude]",        -45.856 ] }
#            mutate { convert      => [ "[logical_ip_geoip][latitude]",        "float" ] }
#            mutate { replace      => [ "[logical_ip_geoip][longitude]",       170.525 ] }
#            mutate { convert      => [ "[logical_ip_geoip][longitude]",       "float" ] }
#        }
#    }
# 
#    if [action]=="DELIVER1"  {
#        geoip { 
#            source=> "deliver_ip"
#            target=> "deliver_ip_geoip"
#        }
#        if [delivery_ip] =~ /^10\./ {
#            mutate { replace      => { "[deliver_ip_geoip][timezone]"      => "Europe/Poland" } }
#            mutate { replace      => { "[deliver_ip_geoip][country_name]"  => "Internal Addresses" } }
#            mutate { replace      => { "[deliver_ip_geoip][country_code2]" => "WPL" } }
#            mutate { replace      => { "[deliver_ip_geoip][country_code3]" => "WPL" } }
#            mutate { remove_field => [ "[deliver_ip_geoip][location]" ] }
#            mutate { add_field    => { "[deliver_ip_geoip][location]"      => "170.525" } }
#            mutate { add_field    => { "[deliver_ip_geoip][location]"      => "-45.865" } }
#            mutate { convert      => [ "[deliver_ip_geoip][location]",        "float" ] }
#            mutate { replace      => [ "[deliver_ip_geoip][latitude]",        -45.856 ] }
#            mutate { convert      => [ "[deliver_ip_geoip][latitude]",        "float" ] }
#            mutate { replace      => [ "[deliver_ip_geoip][longitude]",       170.525 ] }
#            mutate { convert      => [ "[deliver_ip_geoip][longitude]",       "float" ] }
#        }
#    }
#
#    if [action]=="ACCEPT"  {
#        geoip {
#            source=> "accept_ip"
#            target=> "accept_ip_geoip"
#        }
#        if [accept_ip] =~ /^10\./ {
#            mutate { replace      => { "[accept_ip_geoip][timezone]"      => "Europe/Poland" } }
#            mutate { replace      => { "[accept_ip_geoip][country_name]"  => "Internal Addresses" } }
#            mutate { replace      => { "[accept_ip_geoip][country_code2]" => "WPL" } }
#            mutate { replace      => { "[accept_ip_geoip][country_code3]" => "WPL" } }
#            mutate { remove_field => [ "[accept_ip_geoip][location]" ] }
#            mutate { add_field    => { "[accept_ip_geoip][location]"      => "170.525" } }
#            mutate { add_field    => { "[accept_ip_geoip][location]"      => "-45.865" } }
#            mutate { convert      => [ "[accept_ip_geoip][location]",        "float" ] }
#            mutate { replace      => [ "[accept_ip_geoip][latitude]",        -45.856 ] }
#            mutate { convert      => [ "[accept_ip_geoip][latitude]",        "float" ] }
#            mutate { replace      => [ "[accept_ip_geoip][longitude]",       170.525 ] }
#            mutate { convert      => [ "[accept_ip_geoip][longitude]",       "float" ] }
#        }
#    }
    
   if [_else] {
#	drop {}
        mutate {add_field => { "action" => "PARSE_ERROR" }}
   } 
	
   mutate {
		add_field => { "[@metadata][action]" => "%{action}" }
  }
   mutate {
		lowercase => [ "[@metadata][action]" ]
  }

}


output {
	stdout { codec => rubydebug }
	elasticsearch {
		hosts => ["localhost:9200"]
		#index => "smg-%{[@metadata][action]}-%{+YYYY.MM.dd}"
		index => "smg-event-%{+YYYY.MM.dd}"
        manage_template => "true"
        template_name => "smg_event_template"
        template_overwrite => "true"
        template => "/etc/logstash/conf.d/smg/smg_event_template.json"
	}
}
 


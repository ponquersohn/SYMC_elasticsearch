input {
	file {
		path => "/var/log/cas-test.log"
		discover_interval => "1"
		start_position => "beginning"
	}
}

filter {
	grok {
        break_on_match => "true"
        patterns_dir => ["/etc/logstash/conf.d/cas/cas_patterns"]
	
		#everything else to bin
		match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:[%{POSINT:syslog_pid}])?: ProtocolRest\:\:Sending response\: %{DATA:syslog_json}\#%{NUMBER:something}$"}
        
        match => { "message" => "%{GREEDYDATA:_else}"}
	}

	json {
    		source => "[syslog_json]"
  	}
    
	date {
		match => ["syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601"]
  		target => "cas_timestamp"
		timezone => "Etc/UTC"
	}
    
    ruby {
        code => 'event.set("av",[])'               
    }
    
    if [kaspersky][pattern_version] =~ /.+/ {
        mutate {        
            convert         => {"[kaspersky][pattern_date]" => "string"}
            add_field       => {"[kaspersky][name]" => "kaspersky"}
            add_field       => {"[avconviction]" => "true"}
        }
        
        ruby {
            code => 'event.set("av", event.get("av") + [event.get("kaspersky")])'
        }
        
    }
    
    if [sophos][pattern_version] =~ /.+/ {
        mutate {
            convert         => {"[sophos][pattern_date]" => "string"}
            add_field       => {"[sophos][name]" => "sophos"}
            add_field       => {"[avconviction]" => "true"}
        }
        ruby {
            code => 'event.set("av", event.get("av") + [event.get("sophos")])'
        }
    }
    
    if [symantec][pattern_version] =~ /.+/ {
        mutate {
            convert         => {"[symantec][pattern_date]" => "string"}
            add_field       => {"[symantec][name]" => "symantec"}
            add_field       => {"[avconviction]" => "true"}
        }        
        ruby {
            code => 'event.set("av", event.get("av") + [event.get("symantec")])'
        }
    }
    
    if [avconviction] {
        mutate {
            remove_field  => ["kaspersky", "sophos", "symantec", "avconviction"]
        }        
        split {
            field => "av"
        }
    }

}




output {
	#stdout { codec => rubydebug } 

	elasticsearch {
		index => "cas-event-%{+YYYY.MM.dd}"
		hosts => ["localhost:9200"]
        manage_template => "true"
        template_name => "cas_event_template"
        template_overwrite => "true"
        template => "/etc/logstash/conf.d/cas/cas_event_template.json"
	} 
}



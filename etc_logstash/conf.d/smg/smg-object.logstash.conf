
input {
    file { 
	path => "/var/log/smg.log"
	start_position => "beginning"
        discover_interval => "1"
    }
}

filter { 
    grok {
        break_on_match => true
        patterns_dir => ["/etc/logstash/conf.d/smg/smg_patterns"]
        # single lines
        match => { "message" => [
                "%{SMG_ACCEPT_OBJ_PTRN}",
                "%{SMG_EHLO_OBJ_PTRN}",
                "%{SMG_TLS_RECEIVED_OBJ_PTRN}",
                "%{SMG_SUBJECT_OBJ_PTRN}",
                "%{SMG_SOURCE_OBJ_PTRN}",
                "%{SMG_SENDER_OBJ_PTRN}",                
                "%{SMG_MSGID_OBJ_PTRN}",
                "%{SMG_MSG_SIZE_OBJ_PTRN}",                
                "%{SMG_LOGICAL_IP_OBJ_PTRN}",
                "%{SMG_RECEIVED_OBJ_PTRN}",
                "%{SMG_UNSCANNABLE_OBJ_PTRN}",
                # singles to split
                "%{SMG_ATTACH_OBJ_PTRN}",                
                "%{SMG_ORCPTS_OBJ_PTRN}",
                # multiple events per email
                "%{SMG_VERDICT_OBJ_PTRN}",
                "%{SMG_UNTESTED_OBJ_PTRN}",
                "%{SMG_TD_RESULT_OBJ_PTRN}",
                "%{SMG_IRCPTACTION_OBJ_PTRN}",
                "%{SMG_FIRED_OBJ_PTRN}",
                "%{SMG_TRACKERID_OBJ_PTRN}",
                "%{SMG_RESUBMIT_OBJ_PTRN}",
                "%{SMG_DELIVER_OBJ_PTRN}",
                "%{SMG_VIRUS_OBJ_PTRN}",
                "%{SMG_TRANS_FAILURE_OBJ_PTRN}",
                "%{SMG_DELIVERY_FAILURE_OBJ_PTRN}",
#                "%{}",                "%{}",
#                "%{}",                "%{}",
#                "%{}",                "%{}",
#                "%{}",                "%{}",

        
#        #everything else to bin
#
                "%{SMG_ELSE}"
        ]}
#
        add_field => [ "received_at", "%{@timestamp}" ]
        add_field => [ "received_from", "%{host}" ]
          
    }
    
    date {
        match => [ "[accept][date]", "UNIX" ]
        target => [ "[accept][date_formatted]" ] 
    }
    
    date {
        match => [ "[ehlo][date]", "UNIX" ]
        target => [ "[ehlo][date_formatted]" ] 
    }

    date {
        match => [ "[tls_received][date]", "UNIX" ]
        target => [ "[tls_received][date_formatted]" ] 
    }

    date {
        match => [ "[subject][date]", "UNIX" ]
        target => [ "[subject][date_formatted]" ] 
    }    

    date {
        match => [ "[source][date]", "UNIX" ]
        target => [ "[source][date_formatted]" ] 
    }    
    date {
        match => [ "[sender][date]", "UNIX" ]
        target => [ "[sender][date_formatted]" ] 
    }    
    date {
        match => [ "[msgid][date]", "UNIX" ]
        target => [ "[msgid][date_formatted]" ] 
    }    
    date {
        match => [ "[msg_size][date]", "UNIX" ]
        target => [ "[msg_size][date_formatted]" ] 
    }    

    date {
        match => [ "[logical_ip][date]", "UNIX" ]
        target => [ "[logical_ip][date_formatted]" ] 
    }

    date {
        match => [ "[received][date]", "UNIX" ]
        target => [ "[received][date_formatted]" ] 
    }        

    date {
        match => [ "[unscannable][date]", "UNIX" ]
        target => [ "[unscannable][date_formatted]" ] 
    }        

#singles to split
    date {
        match => [ "[attach][date]", "UNIX" ]
        target => [ "[attach][date_formatted]" ] 
    }        
    date {
        match => [ "[orcpts][date]", "UNIX" ]
        target => [ "[orcpts][date_formatted]" ] 
    }        

# multiple events per email
    date {
        match => [ "[verdict][date]", "UNIX" ]
        target => [ "[verdict][date_formatted]" ] 
    }            

    date {
        match => [ "[untested][date]", "UNIX" ]
        target => [ "[untested][date_formatted]" ] 
    }            

    date {
        match => [ "[td_result][date]", "UNIX" ]
        target => [ "[td_result][date_formatted]" ] 
    }

    date {
        match => [ "[td_result][timestamp1]", "UNIX" ]
        target => [ "[td_result][timestamp1_formatted]" ] 
    }

    date {
        match => [ "[td_result][timestamp2]", "UNIX" ]
        target => [ "[td_result][timestamp2_formatted]" ] 
    }

    date {
        match => [ "[ircptaction][date]", "UNIX" ]
        target => [ "[ircptaction][date_formatted]" ] 
    }

    date {
        match => [ "[fired][date]", "UNIX" ]
        target => [ "[fired][date_formatted]" ] 
    }

    date {
        match => [ "[trackerid][date]", "UNIX" ]
        target => [ "[trackerid][date_formatted]" ] 
    }

    date {
        match => [ "[resubmit][date]", "UNIX" ]
        target => [ "[resubmit][date_formatted]" ] 
    }

    date {
        match => [ "[deliver][date]", "UNIX" ]
        target => [ "[deliver][date_formatted]" ] 
    }

    date {
        match => [ "[virus][date]", "UNIX" ]
        target => [ "[virus][date_formatted]" ] 
    }

    date {
        match => [ "[trans_failure][date]", "UNIX" ]
        target => [ "[trans_failure][date_formatted]" ] 
    }

    date {
        match => [ "[delivery_failure][date]", "UNIX" ]
        target => [ "[delivery_failure][date_formatted]" ] 
    }



# finishing touch - split what needs to be splitted
	mutate { 
		split => ["[attach][attachments]","|"]
		split => ["[orcpts][recipients]", "|"]  
        split => ["[untested][untested]","|"]      
	}   
#
 	if [action]=="LOGICAL_IP"  {
 		geoip {
 			source=> "[logical_ip][logical_ip]"
 			target=> "[logical_ip][logical_ip_geoip]"
 		} 
 	   	if [logical_ip][logical_ip] =~ /^10\./ {
 			mutate { replace      => { "[logical_ip][logical_ip_geoip][timezone]"      => "Europe/Poland" } }
 			mutate { replace      => { "[logical_ip][logical_ip_geoip][country_name]"  => "Internal Addresses" } }
 			mutate { replace      => { "[logical_ip][logical_ip_geoip][country_code2]" => "WPL" } }
 			mutate { replace      => { "[logical_ip][logical_ip_geoip][country_code3]" => "WPL" } }
 			mutate { remove_field => [ "[logical_ip][logical_ip_geoip][location]" ] }
 			mutate { add_field    => { "[logical_ip][logical_ip_geoip][location]"      => "170.525" } }
 			mutate { add_field    => { "[logical_ip][logical_ip_geoip][location]"      => "-45.865" } }
 			mutate { convert      => [ "[logical_ip][logical_ip_geoip][location]",        "float" ] }
 			mutate { replace      => [ "[logical_ip][logical_ip_geoip][latitude]",        -45.856 ] }
 			mutate { convert      => [ "[logical_ip][logical_ip_geoip][latitude]",        "float" ] }
 			mutate { replace      => [ "[logical_ip][logical_ip_geoip][longitude]",       170.525 ] }
 			mutate { convert      => [ "[logical_ip][logical_ip_geoip][longitude]",       "float" ] }
 		}
 	}
 
        if [action]=="DELIVER"  {
                geoip { 
                        source=> "[delivery_ip][delivery_ip]"
                        target=> "[delivery_ip][delivery_ip_geoip]"
                }
                if [delivery_ip] =~ /^10\./ {
                        mutate { replace      => { "[delivery_ip][delivery_ip_geoip][timezone]"      => "Europe/Poland" } }
                        mutate { replace      => { "[delivery_ip][delivery_ip_geoip][country_name]"  => "Internal Addresses" } }
                        mutate { replace      => { "[delivery_ip][delivery_ip_geoip][country_code2]" => "WPL" } }
                        mutate { replace      => { "[delivery_ip][delivery_ip_geoip][country_code3]" => "WPL" } }
                        mutate { remove_field => [ "[delivery_ip][delivery_ip_geoip][location]" ] }
                        mutate { add_field    => { "[delivery_ip][delivery_ip_geoip][location]"      => "170.525" } }
                        mutate { add_field    => { "[delivery_ip][delivery_ip_geoip][location]"      => "-45.865" } }
                        mutate { convert      => [ "[delivery_ip][delivery_ip_geoip][location]",        "float" ] }
                        mutate { replace      => [ "[delivery_ip][delivery_ip_geoip][latitude]",        -45.856 ] }
                        mutate { convert      => [ "[delivery_ip][delivery_ip_geoip][latitude]",        "float" ] }
                        mutate { replace      => [ "[delivery_ip][delivery_ip_geoip][longitude]",       170.525 ] }
                        mutate { convert      => [ "[delivery_ip][delivery_ip_geoip][longitude]",       "float" ] }
                }
        }

        if [action]=="ACCEPT"  {
                geoip {
                        source=> "[accept_ip][accept_ip]"
                        target=> "[accept_ip][accept_ip_geoip]"
                }
                if [accept_ip] =~ /^10\./ {
                        mutate { replace      => { "[accept_ip][accept_ip_geoip][timezone]"      => "Europe/Poland" } }
                        mutate { replace      => { "[accept_ip][accept_ip_geoip][country_name]"  => "Internal Addresses" } }
                        mutate { replace      => { "[accept_ip][accept_ip_geoip][country_code2]" => "WPL" } }
                        mutate { replace      => { "[accept_ip][accept_ip_geoip][country_code3]" => "WPL" } }
                        mutate { remove_field => [ "[accept_ip][accept_ip_geoip][location]" ] }
                        mutate { add_field    => { "[accept_ip][accept_ip_geoip][location]"      => "170.525" } }
                        mutate { add_field    => { "[accept_ip][accept_ip_geoip][location]"      => "-45.865" } }
                        mutate { convert      => [ "[accept_ip][accept_ip_geoip][location]",        "float" ] }
                        mutate { replace      => [ "[accept_ip][accept_ip_geoip][latitude]",        -45.856 ] }
                        mutate { convert      => [ "[accept_ip][accept_ip_geoip][latitude]",        "float" ] }
                        mutate { replace      => [ "[accept_ip][accept_ip_geoip][longitude]",       170.525 ] }
                        mutate { convert      => [ "[accept_ip][accept_ip_geoip][longitude]",       "float" ] }
                }
        }
    
   if [_else] {
    # 	drop {}
        # mutate {add_field => { "action" => "PARSE_ERROR" }}
        mutate { add_tag => "PARSE_ERROR" }
   } 
	
   mutate {
		add_field => { "[@metadata][action]" => "%{action}" }
  }
   mutate { 
		lowercase => [ "[@metadata][action]" ] 
  }

}


output {
    #stdout { codec => rubydebug } 
    if "PARSE_ERROR" not in [tags] {
        elasticsearch {
            hosts => ["localhost:9200"]
            #index => "smg-%{[@metadata][action]}-%{+YYYY.MM.dd}"
            index => "smg-object-%{+YYYY.MM.dd}"
            action => "update"
            # To-Do - change this to actually create the doc by script. It needs the script to have all the fields included... like @timestamp and recived by and such.
            doc_as_upsert => true
            # scripted_upsert => true
            document_id => "%{smguid}"
            retry_on_conflict => 100
            script_lang => "painless"
            script_type => "inline"
            script_var_name => "event"
            script => '
                if (params.event.containsKey("accept")) {ctx._source.accept = params.event.accept;}
                if (params.event.containsKey("ehlo")) {ctx._source.ehlo = params.event.ehlo;}
                if (params.event.containsKey("tls_received")) {ctx._source.tls_received = params.event.tls_received;}
                if (params.event.containsKey("subject")) {ctx._source.subject = params.event.subject;}
                if (params.event.containsKey("source")) {ctx._source.source = params.event.source;}
                if (params.event.containsKey("sender")) {ctx._source.sender = params.event.sender;}
                if (params.event.containsKey("msgid")) {ctx._source.msgid = params.event.msgid;}
                if (params.event.containsKey("msg_size")) {ctx._source.msg_size = params.event.msg_size;}
                if (params.event.containsKey("logical_ip")) {ctx._source.logical_ip = params.event.logical_ip;}
                if (params.event.containsKey("received")) {ctx._source.received = params.event.received;}
                if (params.event.containsKey("unscannable")) {ctx._source.unscannable = params.event.unscannable;}
        
        //singles to split
                if (params.event.containsKey("attach")) {ctx._source.attach = params.event.attach;}
                if (params.event.containsKey("orcpts")) {ctx._source.orcpts = params.event.orcpts;}
       
        // multiple events per email
                if (params.event.containsKey("verdict")) {
                    if (!ctx._source.containsKey("verdicts")){
                        ctx._source.put("verdicts", new ArrayList());
                    }
                    ctx._source.verdicts.add(params.event.verdict);
                }

                if (params.event.containsKey("untested")) {
                    if (!ctx._source.containsKey("untesteds")){
                        ctx._source.put("untesteds", new ArrayList());
                    }
                    ctx._source.untesteds.add(params.event.untested);
                }
                
                if (params.event.containsKey("td_result")) {
                    if (!ctx._source.containsKey("td_results")){
                        ctx._source.put("td_results", new ArrayList());
                    }
                    ctx._source.td_results.add(params.event.td_result);
                }

                if (params.event.containsKey("ircptaction")) {
                    if (!ctx._source.containsKey("ircptactions")){
                        ctx._source.put("ircptactions", new ArrayList());
                    }
                    ctx._source.ircptactions.add(params.event.ircptaction);
                }
                if (params.event.containsKey("fired")) {
                    if (!ctx._source.containsKey("fireds")){
                        ctx._source.put("fireds", new ArrayList());
                    }
                    ctx._source.fireds.add(params.event.fired);
                }

                if (params.event.containsKey("trackerid")) {
                    if (!ctx._source.containsKey("trackerids")){
                        ctx._source.put("trackerids", new ArrayList());
                    }
                    ctx._source.trackerids.add(params.event.trackerid);
                }

                if (params.event.containsKey("resubmit")) {
                    if (!ctx._source.containsKey("resubmits")){
                        ctx._source.put("resubmits", new ArrayList());
                    }
                    ctx._source.resubmits.add(params.event.resubmit);
                }

                if (params.event.containsKey("deliver")) {
                    if (!ctx._source.containsKey("delivers")){
                        ctx._source.put("delivers", new ArrayList());
                    }
                    ctx._source.delivers.add(params.event.deliver);
                }

                if (params.event.containsKey("virus")) {
                    if (!ctx._source.containsKey("viruses")){
                        ctx._source.put("viruses", new ArrayList());
                    }
                    ctx._source.viruses.add(params.event.virus);
                }

                if (params.event.containsKey("trans_failure")) {
                    if (!ctx._source.containsKey("trans_failures")){
                        ctx._source.put("trans_failures", new ArrayList());
                    }
                    ctx._source.trans_failures.add(params.event.trans_failure);
                }

                if (params.event.containsKey("delivery_failure")) {
                    if (!ctx._source.containsKey("delivery_failures")){
                        ctx._source.put("delivery_failures", new ArrayList());
                    }
                    ctx._source.delivery_failures.add(params.event.delivery_failure);
                }



                
                if (!ctx._source.containsKey("log_lines")){
                    ctx._source.put("log_lines", new ArrayList());
                }
                ctx._source.log_lines.add(params.event.message);

                '

	    }
    } else {
        elasticsearch {
	    	hosts => ["localhost:9200"]
	    	#index => "smg-%{[@metadata][action]}-%{+YYYY.MM.dd}"
	    	index => "smg-error-object-%{+YYYY.MM.dd}"
            doc_as_upsert => true
            retry_on_conflict => 100
        }
    }
}
 

